本課概述了Java EE 7體系結構及其組件。完成本課程後，您應該能夠描述：
•標準，容器，API和服務
•映射到層和容器的應用程序組件功能
– Web容器技術
–業務邏輯實施技術
– Web服務技術
•打包和部署
•企業JavaBean，託管Bean和CDI Bean
–了解生命週期和內存範圍
•將組件與註釋，注入和JNDI鏈接在一起

企業應用需求
Java EE平台：
•是用於實現企業級應用程序的體系結構
•使用Java和Internet技術
•主要目標是通過以下應用程序模型簡化企業級應用程序的開發：
–與供應商無關
–基於組件

業務邏輯與平台服務的分離

Java EE 7服務器，容器和API的結構和目的
Java EE平台描述了Web和EJB容器以及各種API：
•Web容器技術
•JavaSE技術
•所有容器中的技術
•EJB容器技術
•技術支持
完整平台服務器實施

EJB Lite and EJB Full Containers
Note:企業級JavaBean（Enterprise JavaBean, EJB）是一個用來構築企業級應用的伺服器端可被管理組件。

EJB Lite功能：
•Web配置文件要求
•會話bean組件：
	–無狀態
	–有狀態
	–Singleton
•支持本地客戶
•方法調用：
	–同步
	–異步
•交易模式：
	–Container-managed 集裝箱管理
	–Bean-managed Bean管理
•聲明和程序安全
•自動創建的EJB計時器

EJB Full = EJB Lite +其他功能：
•Full Platform 所需
•Message-driven beans 消息驅動的bean
•遠程和本地客戶端
•JAX-WS Web服務端點
•持久EJB計時器服務
•支持舊版服務和EJB API


網頁設計的演變

•Web：從靜態HTML文檔開始
•CGI腳本：引入了動態生成的內容
•Java servlet：多線程和可擴展的解決方案
•JSP(Java Server Pages)：改進了Servlet的UI設計
•Java Server Faces：已實施的MVC方法
•帶有REST服務和Web sockets的JavaScript：向可能使用Servlet / JSP / JSF生成的頁面添加了客戶端UI和事件處理

隨著網頁設計技術的發展，實現了更高水平的動態處理和可伸縮性。簡單的靜態頁面技術得到發展，首先允許動態視圖生成，然後通過使用諸如模型視圖控制器之類的模式引入關注點分離來改進代碼結構。
Web設計演進的最新階段通過JavaScript在客戶端層上引入了動態處理，它可以通過REST服務和Web套接字訪問服務器端功能。但是，您的JavaScript代碼仍然必須通過更傳統的方式（例如，由JSP，JSF或Servlet生成的服務器生成的UI）甚至通過靜態HTML文檔下載來交付給客戶端。

MVC (Model View Controller)

Model:
•實施業務邏輯
•管理數據持久性

View:
•產生用戶界面
•管理演示
•產生事件

Controller:
•處理事件
•向模型Model發送命令
•控制視圖View

Model View Controller設計模式解決關注點設計原則的分離。它建議可以對應用程序代碼進行結構化，以便應用程序中的每個組件僅負責以下方面之一：
•製作用戶界面演示
•處理用戶界面事件
•調用應用程序業務邏輯
這種方法的好處如下：
•應用程序代碼更加靈活。相同的模型（業務邏輯）可以被不同的視圖（演示文稿）重用，例如，基於Web的或移動應用程序的客戶端。
•開發人員可以專注於系統的前端或後端邏輯。例如，UI設計或數據庫持久性邏輯開發需要非常不同的技能。




